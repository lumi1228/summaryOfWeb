// 1、--------------------
var func = 1
function func() {}
console.log(func + func)

// 结果：2
// 这题考察的 GO，也就是全局的预编译：

// 创建 GO 对象
// 找变量声明，将变量声明作为 key，值赋为 undefined
// 找函数声明，将函数名作为 GO 对象的key，值赋为函数体
// 编译阶段：创建 GO 对象后，func 作为 key，值为 undefined，然后 func 变成了 函数体，所以在编译结束时，func 还是一个 function

// 运行阶段：func 被赋值为 1，所以 func + func 就是 2


// ------------------
// 变量提升（Hoisting） 和 函数与变量声明优先级

// 编译阶段（提升发生） ：
// - JavaScript 引擎在代码执行前会进行编译，此时会将 function func() {} 函数声明提升到当前作用域的顶部
// - 同时也会将 var func 变量声明提升到作用域顶部，但 变量初始化（赋值为1）会留在原地
// - 当函数声明和同名变量声明同时存在时， 函数声明的优先级高于变量声明

// 执行阶段 ：
// - 首先执行 var func = 1 ，这会将之前提升的函数引用覆盖为数值 1
// - 然后执行 function func() {} ，但由于变量已经被赋值，这个函数声明在执行阶段不会生效
// - 最后执行 console.log(func + func) ，此时 func 的值是 1，所以 1 + 1 = 2
